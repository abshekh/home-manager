#+TITLE: emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#todos-][TODOS]]
- [[#load-envs][LOAD ENVS]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting The Font Face]]
- [[#grafical-user-interface-tweaks][GRAFICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theming][THEMING]]
- [[#which-key][WHICH KEY]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#keybindings][Keybindings]]
  - [[#enabling-org-tempo][Enabling Org Tempo]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#rainbow-mode][RAINBOW MODE]]

* TODO TODOS [/]
- [ ] remove bell
- [ ] format src blocks in org mode
- [ ] auto insert list items in the org mode
- [ ] theming
    - [ ] customize kanagawa
- [ ] add dirvish
- [ ] c-j, c-k in ivy
- [ ] shortcut for fullscreen
- [ ] add nerd icons instead of all the icons
- [ ] remove the default keybinding for comment and make it 'gcc'

* LOAD ENVS
Envs are generated from the nix module, and would mostly contain the nix-store path.
#+begin_src emacs-lisp
(load (concat user-emacs-directory "envs.el"))
#+end_src

* IMPORTANT PROGRAMS TO LOAD FIRST
** Load Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
(use-package general
    :config
    (general-evil-setup)

    ;; setup 'SPC' as the global leader key
    (general-create-definer cp/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in the insert mode

    (cp/leader-keys
    "."   '(find-file t :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB TAB" '(comment-line :wk "Comment line"))

    (cp/leader-keys
    "b"   '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

    (cp/leader-keys
    "e"   '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in the buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in the region"))

    (cp/leader-keys
    "h"   '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '((lambda () (interactive) (load-file user-init-file)) :wk "Reload emacs config"))

    (cp/leader-keys
    "t"   '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

    (cp/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window"))
  )
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.
** Setting The Font Face
#+begin_example
use ":describe-font", to list all the fonts
#+end_example

#+begin_src emacs-lisp
    (set-face-attribute 'default nil
      :font "Iosevka"
      :height 270
      :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
      :font "Iosevka"
      :height 270
      :weight 'medium)

    ;; Makes commented text and keyword italics.
    (set-face-attribute 'font-lock-comment-face nil
      :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
      :slant 'italic)
    (setq-default line-spacing 0.12)
#+end_src

* GRAFICAL USER INTERFACE TWEAKS
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp 
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp 
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* SHELLS AND TERMINALS
** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
  (use-package vterm
    :init
    (setq shell-file-name (getenv "SHELL")
          vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (cp/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* THEMING
#+begin_src emacs-lisp
(load-theme 'kanagawa t)
#+end_src

* WHICH KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode t)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first 'nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " îªœ "))
#+end_src

* IVY (COUNSEL)
- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Ivy-rich allows us to add descriptions alongside the commands in M-x.
  
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* ORG MODE
** Keybindings
#+begin_src emacs-lisp
(general-define-key
:states 'normal
:keymaps 'org-mode-map
"K" '(org-open-at-point t :wk "Org open at point"))
#+end_src

** Enabling Org Tempo
This builtin package has some shorthands for org mode.
#+begin_example
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' â€¦ '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' â€¦ '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' â€¦ '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' â€¦ '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' â€¦ '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' â€¦ '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' â€¦ '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' â€¦ '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' â€¦ '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' â€¦ '#+END_VERSE'         |
#+end_example

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
By default, org mode src blocks were getting indented randomly.
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src
